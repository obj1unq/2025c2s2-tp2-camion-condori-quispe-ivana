import cosas.*
import camion.*

describe "el camion y las cosas" {
  test "ejemploUno" {
    //camion.cosas.clear() // nos aseguramos que esta vacio
    camion.cargar(bumblebee)
    assert.that(camion.cosas().contains(bumblebee))
    assert.that(camion.cosas().size() == 1) // aca me aseguro que solo hay un elemento cargado

    camion.cargar(knightRider)
    assert.equals(camion.cosas(), #{bumblebee, knightRider}) // en vez de usar el size, me centro directamente en lo que hay dentro
//2 me daba error -> y eso es porque no llame al getter correctamente y recordar que cuando comparas debe ser set == set 
    camion.descargar(bumblebee)
    assert.that(camion.cosas().size() == 1)

    //camion.cargar(knightRider)
    assert.throwsException({camion.cargar(knightRider)})
    /*
    Comprueba si un bloque genera una excepción. En caso contrario, se genera una excepción.
    */
    assert.throwsException({camion.descargar(bumblebee)})
  }

  test "Todo peso es par" {
    camion.cargar(bumblebee)
    assert.that(camion.cosas().contains(bumblebee))
    arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)
    assert.that(camion.todoPesoEsPar())
    camion.descargar(arenaAGranel)
    arenaAGranel.peso(51)
    camion.cargar(arenaAGranel)
    assert.notThat(camion.todoPesoEsPar())  
  }

  test "hay Alguno Que Pesa" {
    //cargamos
    camion.cargar(bumblebee)
    assert.that(camion.cosas().contains(bumblebee))
    arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)

    assert.that(camion.hayAlgunaCosaQuePesa(50))
    assert.that(camion.hayAlgunaCosaQuePesa(800))
    assert.notThat(camion.hayAlgunaCosaQuePesa(500))
  }

  test "Peso y Exceso de Peso" {
    //cargamos mas
    camion.cargar(bumblebee)
    paqueteDeLadrillos.cantDeLadrillos(300)
    camion.cargar(paqueteDeLadrillos)

    //preguntamos
    assert.notThat(camion.excedioElpeso())
    
    //descagamos
    camion.descargar(paqueteDeLadrillos)
    //actualizamos
    paqueteDeLadrillos.cantDeLadrillos(400)
    camion.cargar(paqueteDeLadrillos)
    assert.that(camion.excedioElpeso())
  }

  test "el de nivel" {
    //cargamos bee con modo auto
    bumblebee.transformacion(auto)
    camion.cargar(bumblebee)
    //cargamos bateria sin misiles
    bateriaAntiaerea.equipo(sinMisiles)
    camion.cargar(bateriaAntiaerea)
    
    camion.cargar(residuosRadiactivos)

    //preguntamos
    assert.equals(bateriaAntiaerea, camion.elDeNivel(0))
    assert.equals(bumblebee, camion.elDeNivel(15))
    assert.equals(residuosRadiactivos, camion.elDeNivel(200))
    assert.throwsException({camion.elDeNivel(30)})

    //cargamos bee con modo robot
    camion.descargar(bumblebee)
    bumblebee.transformacion(robot)
    camion.cargar(bumblebee)
    assert.equals(bumblebee, camion.elDeNivel(30))
     
    camion.descargar(bateriaAntiaerea) 
    bateriaAntiaerea.equipo(misiles)
    camion.cargar(bateriaAntiaerea)
    assert.equals(bateriaAntiaerea, camion.elDeNivel(100))
  }

  test "Cosas Peligrosas" {
    camion.cargar(knightRider)
    bateriaAntiaerea.equipo(misiles)
    camion.cargar(bateriaAntiaerea)

    assert.equals(camion.cosasMasPeligrosasQueSuperan(15), #{bateriaAntiaerea})
    assert.equals(camion.cosasMasPeligrosasQue(bumblebee), #{bateriaAntiaerea})
    
    camion.descargar(bateriaAntiaerea) 
    bateriaAntiaerea.equipo(misiles)
    camion.cargar(bateriaAntiaerea)
    assert.equals(camion.cosasMasPeligrosasQueSuperan(2), #{knightRider, bateriaAntiaerea})
    //revisar 

    assert.equals(camion.cosasMasPeligrosasQue(paqueteDeLadrillos), #{bateriaAntiaerea, knightRider})
    
    assert.equals(camion.cosasMasPeligrosasQueSuperan(200), #{})

    assert.equals(camion.cosasMasPeligrosasQue(residuosRadiactivos), #{})

  }

  test "Puede circular en la ruta" {
    //cargamos
    bumblebee.transformacion(auto)
    camion.cargar(bumblebee)
    paqueteDeLadrillos.cantDeLadrillos(300)
    camion.cargar(paqueteDeLadrillos)
    assert.that(camion.puedeCircularEnRuta(20))

    camion.descargar(paqueteDeLadrillos)
    paqueteDeLadrillos.cantDeLadrillos(400)
    camion.cargar(paqueteDeLadrillos)
    assert.notThat(camion.puedeCircularEnRuta(20))
  }
}

/*
lineas para probar en la terminal
camion.cargar(knightRider)
camion.cargar(bumblebee)
camion.todoPesoEsPar()

APUNTES
lanzaExceptionLike(excepción esperada, bloque)
Prueba si un bloque lanza una excepción y si es la misma esperada.

De lo contrario se lanza una excepción.
throwsExceptionLike(exceptionExpected, block)

Comprueba si un bloque genera una excepción. En caso contrario, se genera una excepción.
throwsException(block)
LINKAPUNTES : https://www.wollok.org/documentation/language/#wollok.lib.assert
*/